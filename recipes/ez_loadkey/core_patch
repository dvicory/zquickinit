#!/bin/bash
# vim: softtabstop=2 shiftwidth=2 expandtab

ez_save_and_load() {

    fs="$1"
    encroot="$2"

    keyformat=$( zfs get -H -o value keyformat "${encroot}" )
    [[ ! "$keyformat" == passphrase ]] && exit 0

    keylocation="$( zfs get -H -o value keylocation "${encroot}" )"
    if [[ $keylocation = file://* ]]; then

        key="${keylocation#file://}"
        key="${key#/}"
        keydir=$(dirname "$key")
        keyfile=$(basename "$key")

        # this may be part of a re-run, check to see if we've already saved a copy of the response
        if [[ -e "/run/ez_loadkey/$keydir/$keyfile" ]]; then
            if zfs load-key -L prompt "${encroot}" < "/run/ez_loadkey/$keydir/$keyfile"; then
                return 0
            fi
        fi

        gum style --bold --border double --align center \
                --width 50 --margin "1 2" --padding "2 4" "Found encrypted filesystem" "" "$fs" "encryptionroot=$encroot"

        # shellcheck disable=SC2034
        for i in $(seq 1 3); do
            keyinput=$(gum input \
                --placeholder="Type your key" \
                --header="Enter passphrase for $encroot:" \
                --password)
            if [ -z "$keyinput" ]; then
                printf "\n\n"
                return 1
            fi
            echo "$keyinput" | zfs load-key -L prompt "${encroot}"
            ret=$?
            printf "\n\n"
            if (( ret == 0 )); then
                mkdir -p "/run/ez_loadkey/$keydir"
                if [[ -e "/run/ez_loadkey/$keydir/$keyfile" ]]; then
                        if ! gum confirm "The keylocation $keylocation is already in use. Overwrite?" --default="no"; then exit 1; fi
                fi
                echo "$keyinput" > "/run/ez_loadkey/$keydir/$keyfile"
                return 0
            fi
        done
    fi
    return 1
}

# patch load_key to replace the load-key call with one that saves the key
load_key() {
  local fs encroot key keypath keyformat keylocation keysource hook_envs

  fs="${1}"
  if [ -z "${fs}" ]; then
    zerror "fs is undefined"
    return 1
  fi
  zdebug "fs set to ${fs}"

  # Nothing to do if filesystem is not locked
  if ! encroot="$( be_is_locked "${fs}" )" || [ -z "${encroot}" ]; then
    return 0
  fi

  # Run load-key hooks, if they exist
  hook_envs=( ZBM_LOCKED_FS="${fs}" ZBM_ENCRYPTION_ROOT="${encroot}" )
  if env "${hook_envs[@]}" /libexec/zfsbootmenu-run-hooks "load-key.d"; then
    # If hooks ran, check if the filesystem has been unlocked
    if ! be_is_locked "${fs}" >/dev/null; then
      zdebug "fs ${fs} unlocked by user hooks"
      return 0
    fi
  fi

  # Default to 0 when unset
  [ -n "${CLEAR_SCREEN}" ] || CLEAR_SCREEN=0
  [ -n "${NO_CACHE}" ] || NO_CACHE=0

  # If something goes wrong discovering key location, just prompt
  if ! keylocation="$( zfs get -H -o value keylocation "${encroot}" )"; then
    zdebug "failed to read keylocation on ${encroot}"
    keylocation="prompt"
  fi

  if [ "${keylocation}" = "prompt" ]; then
    zdebug "prompting for passphrase for ${encroot}"
    if [ "${CLEAR_SCREEN}" -eq 1 ] ; then
      tput clear
      tput cup 0 0
    fi

    zfs load-key -L prompt "${encroot}"
    return $?
  fi

  # Strip file path, relative to root
  key="${keylocation#file://}"
  key="${key#/}"

  if [ -e "/${key}" ]; then
    # Prefer the actual path to the key file
    keypath="/${key}"
  elif keysource="$( be_keysource "${fs}" )" && ! [ "${NO_CACHE}" -eq 1 ]; then
    # Otherwise, try to pre-seed a cache location
    # Don't care if this succeeds because it may already be cached
    cache_key "${fs}" "${keylocation}"
    # Cache loading may have unlocked this BE, don't try again
    if ! be_is_locked "${fs}" >/dev/null 2>&1; then
      zdebug "cache attempt has unlocked ${encroot}"
      return 0
    fi

    # If the cached key exists, prefer it
    if [ -e "${BASE}/.keys/${keysource}/${key}" ]; then
      keypath="${BASE}/.keys/${keysource}/${key}"
      zdebug "cached key path for $fs is ${keypath}"
    fi
  fi

  # Load a key from a file, if possible and necessary
  if [ -e "${keypath}" ] && be_is_locked "${fs}" >/dev/null 2>&1; then
    if zfs load-key -L "file://${keypath}" "${encroot}"; then
      zdebug "unlocked ${encroot} from key at ${keypath}"
      return 0
    fi
  fi

  # Otherwise, try to prompt for "passphrase" keys
  keyformat="$( zfs get -H -o value keyformat "${encroot}" )" || keyformat=""
  if [ "${keyformat}" != "passphrase" ]; then
    zdebug "unable to load key with format ${keyformat} for ${encroot}"
    return 1
  fi

  if [ "${CLEAR_SCREEN}" -eq 1 ] ; then
    tput clear
    tput cup 0 0
  fi

  # begin ez_recipes patch
  ez_save_and_load "${fs}" "${encroot}"
  # end ez_recipes patch
}

# patch kexec_kernel to inject keys
kexec_kernel() {
  local selected fs kernel initramfs output hook_envs

  selected="${1}"
  if [ -z "${selected}" ]; then
    zerror "fs, kernel, initramfs undefined"
    return 130
  fi

  # zfs filesystem
  # kernel
  # initramfs
  IFS=' ' read -r fs kernel initramfs <<<"${selected}"

  zdebug "fs: ${fs}, kernel: ${kernel}, initramfs: ${initramfs}"

  CLEAR_SCREEN=1 load_key "${fs}"

  tput cnorm
  tput clear

  if ! mnt=$( mount_zfs "${fs}" ); then
    emergency_shell "unable to mount $( colorize cyan "${fs}" )"
    return 1
  fi

  # Variables to tell user hooks what BE has been selected
  hook_envs=(
    ZBM_SELECTED_BE="${fs}"
    ZBM_SELECTED_KERNEL="${kernel}"
    ZBM_SELECTED_INITRAMFS="${initramfs}"
  )

  # Run boot-environment hooks, if they exist
  env "${hook_envs[@]}" \
    ZBM_SELECTED_MOUNTPOINT="${mnt}" \
    /libexec/zfsbootmenu-run-hooks "boot-sel.d"

  cli_args="$( load_be_cmdline "${fs}" )"
  root_prefix="$( find_root_prefix "${fs}" "${mnt}" )"
  
  # Begin ez_recipes patch
  initrd="${mnt}${initramfs}"

  if [[ -d /run/ez_loadkey ]]; then
    cp "${initrd}" /tmp
    initrd="/tmp/$(basename "${initrd}")"
    find /run/ez_loadkey -depth -print | \
    pax -s "/\/run\/ez_loadkey//" -x sv4cpio -wd | \
      zstd >> "${initrd}"
  fi

  if ! output="$( kexec -a -l "${mnt}${kernel}" \
    --initrd="${initrd}" \
    --command-line="${root_prefix}${fs} ${cli_args}" 2>&1 )"
  then
    zerror "unable to load ${mnt}${kernel} and ${initrd} into memory"
    zerror "${output}"
    umount "${mnt}"
    timed_prompt -d 10 \
      -m "$( colorize red 'Unable to load kernel or initramfs into memory' )" \
      -m "$( colorize orange "${mnt}${kernel}" )" \
      -m "$( colorize orange "${initrd}" )"

    return 1
  else
    if zdebug ; then
      zdebug "loaded ${mnt}${kernel} and ${initrd} into memory"
      zdebug "kernel command line: '${root_prefix}${fs} ${cli_args}'"
      zdebug "${output}"
    fi
  fi
  # End ez_recipes patch

  umount "${mnt}"

  while read -r _pool; do
    if is_writable "${_pool}"; then
      zdebug "${_pool} is read/write, exporting"
      export_pool "${_pool}"
    fi
  done <<<"$( zpool list -H -o name )"

  # Run teardown hooks, if they exist
  env "${hook_envs[@]}" /libexec/zfsbootmenu-run-hooks "teardown.d"

  if ! output="$( kexec -e -i 2>&1 )"; then
    zerror "kexec -e -i failed!"
    zerror "${output}"
    timed_prompt -d 10 \
      -m "$( colorize red "kexec run of ${kernel} failed!" )"
    return 1
  fi
}
